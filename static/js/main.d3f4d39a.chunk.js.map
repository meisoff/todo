{"version":3,"sources":["App.js","index.js"],"names":["Test","props","changeTypeOfTask","newType","setState","state","newTask","type","target","value","changeContentOfTask","newContent","content","changeFilterSettings","typeOfTask","filter","addNewTask","newTaskInfo","key","Symbol","tasks","push","filterTask","isDone","obj","clone","filteredTasks","work","family","personal","business","deepClone","cloneObj","i","Object","Array","deleteTask","arr","result","keys","length","item","e","toggleDoneTask","map","generateTaskMethod","className","style","textDecoration","onClick","onChange","this","defaultValue","required","React","version","Component","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.d3f4d39a.chunk.js","sourcesContent":["import React, {Component} from \"react\";\n\nclass Test extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            newTask: {\n                content: \"\",\n                isDone: false,\n                type: \"Work\",\n            },\n            filteredTasks: {\n                work: [],\n                family: [],\n                personal: [],\n                business: [],\n            },\n            filter: \"AllTypes\"\n        }\n    }\n\n    // Методы прослушивания изменений\n    changeTypeOfTask = (newType) => {\n        this.setState({...this.state, newTask: {...this.state.newTask, type: newType.target.value}})\n    }\n\n    changeContentOfTask = (newContent) => {\n        this.setState({...this.state, newTask: {...this.state.newTask, content: newContent.target.value}})\n    }\n\n    changeFilterSettings = (typeOfTask) => {\n        this.setState({...this.state, filter: typeOfTask.target.value})\n    }\n\n    // Добавляем новую таску\n    addNewTask = () => {\n        let newTaskInfo = this.state;\n        let newContent = {...this.state.newTask, key: Symbol(this.content)}\n        newTaskInfo.tasks.push(newContent);\n        this.filterTask(newContent, newContent.type);\n\n        this.setState({\n            ...newTaskInfo, newTask: {\n                content: \"\",\n                isDone: false,\n                type: \"Work\",\n            }\n        })\n    }\n\n    // Фильтруем таски по типу\n\n    filterTask = (obj, typeOfTask) => {\n        let clone = {...this.state.filteredTasks};\n        let result = (typeOfTask === \"Work\") ? clone.work : (typeOfTask === \"Family\") ? clone.family : (typeOfTask === \"Personal\") ? clone.personal : clone.business;\n        result.push(obj);\n        this.setState({...this.state, filteredTasks: clone})\n    }\n\n    // Функция глубокого копирования для отфильтрованных тасок\n\n    deepClone = (obj) => {\n        const cloneObj = {};\n        for (const i in obj) {\n            if (obj[i] instanceof Object && !(obj[i] instanceof Array)) {\n                cloneObj[i] = this.deepClone(obj[i]);\n                continue;\n            }\n            cloneObj[i] = obj[i];\n        }\n\n        return cloneObj;\n    }\n\n    // Удаление тасок из основного массива (tasks) и отфильрованных массивов по key\n\n    deleteTask = (arr, key) => {\n        let obj = this.state.filteredTasks;\n        // let result = JSON.parse(JSON.stringify(obj)); Не читает метод Symbol, нет возможности сравнить ключи\n        let result = this.deepClone(obj);\n        if (Object.keys(obj.work).length !== 0 || Object.keys(obj.family).length !== 0 || Object.keys(obj.personal).length !== 0 || Object.keys(obj.business).length !== 0) {\n            for (let item of Object.keys(result)) {\n                result[item] = result[item].filter(e => {\n                    return (e.key === key) ? 0 : 1\n                })\n            }\n        }\n\n        this.setState({\n            ...this.state, tasks: arr.filter(e => {\n                return (e.key === key) ? 0 : 1\n            }), filteredTasks: result,\n        })\n\n    }\n\n    toggleDoneTask = (arr, key) => {\n        let obj = this.state.filteredTasks;\n        let result = this.deepClone(obj);\n\n        for (let item of Object.keys(result)) {\n            result[item] = result[item].map(e => {\n                return (e.key === key) ? {\n                    ...e,\n                    isDone: !e.isDone\n                } : {...e}\n            })\n        }\n\n        this.setState({\n            ...this.state, tasks: arr.map(e => {\n                return (e.key === key) ? {\n                    ...e,\n                    isDone: !e.isDone\n                } : {...e}\n            })\n        })\n    }\n\n    // Создание разметки\n\n    generateTaskMethod = (arr) => {\n        return arr.map(e => {\n            return (\n                <div className=\"todo__item\">\n                    <span className=\"todo__item-name\"\n                          style={(e.isDone) ? {textDecoration: \"line-through\"} : {}}>{e.content}</span>\n                    <span onClick={() => this.deleteTask(arr, e.key)}\n                          className=\"todo__item-btn btn btn--red btn--small btn--rounded\">delete</span>\n                    {(e.isDone) ? <span onClick={() => this.toggleDoneTask(arr, e.key)}\n                                        className=\"todo__item-btn btn btn--disabled btn--small btn--rounded\">reversal</span> :\n                        <span onClick={() => this.toggleDoneTask(arr, e.key)}\n                              className=\"todo__item-btn btn btn--blue btn--red btn--small btn--rounded\">done</span>}\n                </div>\n            )\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"todo__body\">\n                <h1 className=\"todo__title\">Todo list</h1>\n\n                <div className=\"todo__header\">\n                    <div className=\"todo__filter\">\n                        <select onChange={this.changeFilterSettings} defaultValue=\"AllTypes\"\n                                className=\"todo__filter-type\" required>\n                            <option value=\"AllTypes\">All types</option>\n                            <option value=\"Work\">Work</option>\n                            <option value=\"Family\">Family</option>\n                            <option value=\"Personal\">Personal</option>\n                            <option value=\"Business\">Business</option>\n                        </select>\n                    </div>\n                </div>\n\n                <div className=\"todo__content\">\n                    <div className=\"todo__content-items\">\n                        {(this.state.filter === \"AllTypes\") ? this.generateTaskMethod(this.state.tasks) : (this.state.filter === \"Work\") ? this.generateTaskMethod(this.state.filteredTasks.work) : (this.state.filter === \"Family\") ? this.generateTaskMethod(this.state.filteredTasks.family) : (this.state.filter === \"Personal\") ? this.generateTaskMethod(this.state.filteredTasks.personal) : this.generateTaskMethod(this.state.filteredTasks.business)}\n                    </div>\n                </div>\n\n                <div className=\"todo__footer\">\n                    <div className=\"todo__add-item\">\n                        <input className=\"todo__add-value\" onChange={this.changeContentOfTask} type=\"text\"\n                               value={this.state.newTask.content}/>\n                        <select defaultValue=\"Work\" onChange={this.changeTypeOfTask} className=\"todo__add-type\">\n                            <option value=\"Work\">Work</option>\n                            <option value=\"Family\">Family</option>\n                            <option value=\"Personal\">Personal</option>\n                            <option value=\"Business\">Business</option>\n                        </select>\n                        <button onClick={this.addNewTask}\n                                className=\"btn btn--blue btn--red btn--small btn--rounded\">Add\n                        </button>\n                    </div>\n\n                    <div className=\"todo__used\">\n                        Used: React: {React.version} | node-sass: 4.14.1\n                    </div>\n\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Test","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}